/*
 * Ejemplo desarrollado por Erick Navarro
 * Blog: e-navarro.blogspot.com
 * Julio - 2018
 */

package analizadores; 
import java_cup.runtime.*;
import Utils.ResultadoParser;
import Utils.Nodo;
import Utils.arbol;
import Utils.cmdGraphviz;

parser code
{:
    private ResultadoParser resultadoParser;
    
    public void setResultadoParser(ResultadoParser resultadoParser){
        this.resultadoParser = resultadoParser;
    }

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
        resultadoParser.setMensaje("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"\n");
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
        resultadoParser.setMensaje("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."+"\n");
    }  
:} 

terminal String PTCOMA,DPUNTOS,PARIZQ,PARDER,CORIZQ,CORDER,LLAVDER,LLAVIZQ,COMA,PUNTO,DECRANGO;
terminal String EXCLAMACION,BARRA,COMILLAS,NUMERAL,DOLAR,PORC,AMPER,COMSIMPLE,MAYORQUE,MENORQUE,IGUAL,INTER,ACENTO,ORSIGN,GUIONB;
terminal String IDENTIFICADOR;
terminal String LETRA;
terminal String MAS,MENOS,POR,DIVIDIDO;
terminal String ENTERO;
terminal String DECIMAL;
terminal String UMENOS;
terminal String REVALUAR,INICONJUNTO,ASIGN;

non terminal ini;
non terminal instrucciones;
non terminal deconjunto;
non terminal valoresconjunto,listavalores;
non terminal instruccion;
non terminal signos;
non terminal terminos,unavar,multvar,decregex;
non terminal Nodo regex;
non terminal expresion;


precedence left MAS,MENOS;
precedence left POR,DIVIDIDO;
precedence right UMENOS; 

start with ini; 

ini::=instrucciones{:resultadoParser.setMensaje("COMPILADO CORRECTAMENTE :)");:};

instrucciones ::= 
   instruccion instrucciones
 | instruccion
 | error instrucciones
; 

instruccion ::= 
   LLAVIZQ deconjunto decregex LLAVDER
;

deconjunto ::=
      deconjunto INICONJUNTO DPUNTOS IDENTIFICADOR ASIGN valoresconjunto PTCOMA {::}
    | deconjunto INICONJUNTO DPUNTOS IDENTIFICADOR ASIGN listavalores PTCOMA {::}
    | INICONJUNTO DPUNTOS IDENTIFICADOR ASIGN valoresconjunto PTCOMA {::}
    | INICONJUNTO DPUNTOS IDENTIFICADOR ASIGN listavalores PTCOMA {::}
;

decregex ::=
      decregex IDENTIFICADOR ASIGN regex:a PTCOMA {:
                                                    arbol nuevo_arbol = new arbol();
                                                    nuevo_arbol.raiz = a;
                                                    nuevo_arbol.generarDot(nuevo_arbol.raiz);
                                                    :}
    | IDENTIFICADOR ASIGN regex:a PTCOMA {:
                                        arbol nuevo_arbol = new arbol();
                                        nuevo_arbol.raiz = a;
                                        nuevo_arbol.generarDot(nuevo_arbol.raiz);
                                        :}
;

regex ::=
        multvar:a regex:b regex:c {:
                                Nodo nuevo_nodo = new Nodo(String.valueOf(a));
                                Nodo hijo_izquierdo = b;
                                Nodo hijo_derecho = c;

                                nuevo_nodo.izquierdo = hijo_izquierdo;
                                nuevo_nodo.derecho = hijo_derecho;
                                RESULT = nuevo_nodo;
                              :}
    |   unavar:a regex:b{:
                                Nodo nuevo_nodo = new Nodo(String.valueOf(a));
                                Nodo hijo_derecho = b;
                                
                                nuevo_nodo.derecho = hijo_derecho;
                                RESULT = nuevo_nodo;
                    :}
    |   PARIZQ multvar:a regex:b regex:c PARDER{:
                                Nodo nuevo_nodo = new Nodo(String.valueOf(a));
                                Nodo hijo_izquierdo = b;
                                Nodo hijo_derecho = c;

                                nuevo_nodo.izquierdo = hijo_izquierdo;
                                nuevo_nodo.derecho = hijo_derecho;
                                RESULT = nuevo_nodo;
                              :}
    |   PARIZQ unavar:a regex:b PARDER{:
                                Nodo nuevo_nodo = new Nodo(String.valueOf(a));
                                Nodo hijo_derecho = b;
                                
                                nuevo_nodo.derecho = hijo_derecho;
                                RESULT = nuevo_nodo;
                    :}
    |   terminos:a {:
                    Nodo nuevo_nodo = new Nodo(String.valueOf(a));
                    RESULT = nuevo_nodo;
                :}
    |   expresion:a {:
                    Nodo nuevo_nodo = new Nodo(String.valueOf(a));
                    RESULT = nuevo_nodo;
                :}
    |   COMILLAS signos:a COMILLAS{:
                                    Nodo nuevo_nodo = new Nodo(String.valueOf(a));
                                    RESULT = nuevo_nodo;
                                :}
;

terminos ::=
        IDENTIFICADOR:a {:RESULT = a;:}
    |   PARIZQ IDENTIFICADOR:a PARDER {:RESULT = a;:}
    |   GUIONB:a {:RESULT = a;:}
    |   PARIZQ GUIONB:a PARDER {:RESULT = a;:}
;

unavar ::=
        POR:a {:RESULT = a;:}
    |   MAS:a {:RESULT = a;:}
    |   INTER:a {:RESULT = a;:}
;

multvar ::=
        PUNTO:a {:RESULT = a;:}
    |   ORSIGN:a {:RESULT = a;:}
;

valoresconjunto ::=
    expresion DECRANGO expresion
    |signos DECRANGO signos
;

listavalores ::=
      listavalores COMA expresion
    | expresion
    | listavalores COMA signos
    | signos
;

expresion  ::= 
    ENTERO:a {:RESULT = a;:}                               
 |  DECIMAL:a {:RESULT = a;:}            
 |  LETRA:a {:RESULT = a;:}                      
;
        
signos ::=
    EXCLAMACION:a {:RESULT = a;:}   
 |  COMILLAS:a {:RESULT = a;:}   
 |  NUMERAL:a {:RESULT = a;:}   
 |  DOLAR:a {:RESULT = a;:}   
 |  PORC:a {:RESULT = a;:}   
 |  AMPER:a {:RESULT = a;:}   
 |  COMSIMPLE:a {:RESULT = a;:}   
 |  PARIZQ:a {:RESULT = a;:}   
 |  PARDER:a {:RESULT = a;:}   
 |  POR:a {:RESULT = a;:}   
 |  MAS:a {:RESULT = a;:}   
 |  COMA:a {:RESULT = a;:}   
 |  MENOS:a {:RESULT = a;:}   
 |  PUNTO:a {:RESULT = a;:}   
 |  BARRA:a {:RESULT = a;:}   
 |  DPUNTOS:a {:RESULT = a;:}   
 |  PTCOMA:a {:RESULT = a;:}   
 |  MENORQUE:a {:RESULT = a;:}   
 |  MAYORQUE:a {:RESULT = a;:}   
 |  IGUAL:a {:RESULT = a;:}   
 |  INTER:a {:RESULT = a;:}   
 |  ACENTO:a {:RESULT = a;:}   
 |  ORSIGN:a {:RESULT = a;:}   
 |  LLAVIZQ:a {:RESULT = a;:}   
 |  LLAVDER:a {:RESULT = a;:}   
;